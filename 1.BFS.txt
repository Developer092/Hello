
from collections import deque

def bfs(graph, start):
    
    visited = set()          
    queue = deque()          
    traversal_order = []     
    
    
    visited.add(start)
    queue.append(start)
    
    while queue:
        
        current_node = queue.popleft()
        traversal_order.append(current_node)
        
        
        for neighbor in graph[current_node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
    
    return traversal_order


if __name__ == "__main__":
   
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }
    
    print("BFS Traversal Order:")
    result = bfs(graph, 'A')
    print(" -> ".join(result))
    
    print("\nBFS starting from 'D':")
    result = bfs(graph, 'D')
    print(" -> ".join(result))
   